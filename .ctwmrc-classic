
# CONFIG FOR CTWM
# file : ~/.ctwmrc 

# $XConsortium: system.twmrc,v 1.8 91/04/23 21:10:58 gildea Exp $
#
# Default twm configuration file; needs to be kept small to conserve string
# space in systems whose compilers don't handle medium-sized strings.
#
# Sites should tailor this file, providing any extra title buttons, menus, etc.
# that may be appropriate for their environment.  For example, if most of the
# users were accustomed to uwm, the defaults could be set up not to decorate
# any windows and to use meta-keys.
#




TitleFont	"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*"
ResizeFont	"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*"
MenuFont	"-adobe-helvetica-bold-r-normal--*-120-*-*-*-*-*-*"
IconFont	"-adobe-helvetica-bold-r-normal--*-100-*-*-*-*-*-*"
IconManagerFont	"-adobe-helvetica-bold-r-normal--*-100-*-*-*"
ShowWorkSpaceManager			# start with workspace manager up
UseThreeDMenus
UseThreeDTitles
UseThreeDIconManagers
UseThreeDBorders
UseThreeDWMap
SunkFocusWindowTitle

WorkSpaceManagerGeometry        "360x60+60-0" 4

WorkSpaces {
    "One"   {"#686B9F" "white" "DeepSkyBlue3" "white" "xpm:background8.xpm" }
    "Two"   {"#686B9F" "white" "firebrick" "white"    "xpm:background1.xpm" }
    "Three" {"#727786" "white" "DarkBlue"  "white"    "xpm:background3.xpm" }
    "Four"  {"#8C5b7A" "white" "MidnightBlue" "white"  }
    "Five"  {"#727786" "white" "firebrick"}
    "Six"   {"#619AAE" "white" "DeepSkyBlue3"}
    "Seven" {"#8C5b7A" "white" "chartreuse4"}
    "Eight" {"#686B9F" "white" "MidnightBlue"}
}


Color
{
    BorderColor           "Red"
    DefaultBackground     "blue"
    DefaultForeground     "gray85"
    BorderTileBackground  "DeepSkyBlue1" {
	"xterm"		"DeepSkyBlue3"
    }
    BorderTileForeground  "Black" {
	"xterm" "DeepSkyBlue3"
    }
    TitleBackground       "DeepSkyBlue1" {
	"xterm" "DeepSkyBlue3"
    }
    TitleForeground       "Black" {
	"xterm" "White"
    }
    MenuBackground        "#686B9F"
    MenuForeground        "white"
    MenuTitleBackground   "gray70"
    MenuTitleForeground   "White"
    IconBackground        "LightSlateBlue"
    IconForeground        "White"
    IconBorderColor       "gray85"
    IconManagerBackground "DeepSkyBlue1" {"Axe" "DeepSkyBlue3" "xload" "DeepSkyBlue2"}
    IconManagerForeground "Black"
    MapWindowBackground   "DeepSkyBlue1" {
	"root*" "Red"
	"xterm" "DeepSkyBlue3"
	"Axe"	"Yellow"
    }
    MapWindowForeground   "Black" {
	"xterm" "White"
    }
}

IconManagerGeometry		"202x300-0+0" 1
IconManagerDontShow {
    "WorkSpaceManager"
}

NoTitle {                  # little programs that look like icons
    "TWM Icon Manager"
    "WorkSpaceManager"
}
#
# Define some useful functions for motion-based actions.
#
MoveDelta 3
Function "move-or-lower" { f.move f.deltastop f.lower }
Function "move-or-raise" { f.move f.deltastop f.raise }
Function "move-or-iconify" { f.move f.deltastop f.iconify }

#
# Set some useful bindings.  Sort of uwm-ish, sort of simple-button-ish
#

Button1 =	: root		: f.menu "defops"
Button2 =	: root		: f.menu "windowops"

Button1 = m	: window|icon	: f.function "move-or-lower"
Button2 = m	: window|icon	: f.iconify
Button3 = m	: window|icon	: f.function "move-or-raise"

Button1 =	: title		: f.move
Button2 =	: title		: f.raiselower

Button1 = m     : title		: f.movetitlebar

Button1 =	: icon		: f.iconify
Button2 =	: icon		: f.iconify

Button1 =	: iconmgr	: f.iconify
Button2 =	: iconmgr	: f.iconify

Button1 =	: frame		: f.resize
Button1 = m	: frame		: f.move
Button2 =	: frame		: f.raiselower
#
# And a menus with the usual things
#
menu "defops"
{
    "CTWM"		f.title
    "Pin menu"		f.pin
    ""			f.separator
    "Xterm"		!"  xterm -bg black -fg grey &"
    "Term"              !"  xterm -fa 10 -bg black -fg grey -e bash &" 
    "Term (larg.)"      !"  xterm -fa 20 -fs 20 -bg black -fg grey -e bash &" 
    ""			f.separator
    "Xclock"		!"  env TZ=Europe/Amsterdam xclock -d -twentyfour  & " 
    "Calculator"	!"xcalc &"
    "nedit"		!"nedit &"
    "Emails"		!"  claws-mail  &"
#    "Firefox"		!" xterm -e firefox52 http://duckduckgo.com &"
    "Dillop"		!" dillop google.com &"
    "Dillo"		!" dillo http://duckduckgo.com &"
    "Links"		!" links -g http://duckduckgo.com &"
    ""			f.nop
    "Restart"		f.restart
    "Exit"		f.quit
}


menu "windowops" {
    "Windows"		f.title
    "Occupy"		f.occupy
    "Occupy All"	f.occupyall
    "Iconify"		f.iconify
    "Refresh"		f.refresh
    "Vanish"		f.vanish
    "Info"		f.identify
    ""			f.separator
    "Resize"		f.resize
    "Move"		f.move
    "Adopt Window"	f.adoptwindow
    "Animate"		f.startanimation
    "Don't animate"	f.stopanimation
    ""			f.separator
    "Send Delete"	f.delete
    "Kill Window"	f.destroy
    "Pin menu"		f.pin
}
### GENERAL CTWM CONFIG 

## Don't grab server when popupping up menus and moving opaque windows
NoGrabServer

## Respect program-requested positions: "on", "off" or "non-zero"
UsePPosition "non-zero"

## Number of outline to be displayed when (de-)iconnifying a window
Zoom 0

## Don't use the default titlebuttons and bindings
#NoDefaults

## Place windows in a pseudo-random location: "on", "off", "all", "unmapped"
RandomPlacement "on"

## Remember if window was iconified when restarting window manager
RestartPreviousState

## Raise window when one click on it
RaiseOnClick

## Use Button 1 to raise a window
RaiseOnClickButton 1

## Automticcally raise window when cursor enters the window
#AutoRaise 

## if Autoraise, wait N ms before raising it
#RaiseDelay 250

## Transient windows get focus automatically when created
AutoFocusToTransients

## Don't send key events from the titlebar 
## and icon managers to the application
#NoTitleFocus

# Use sloppy Focus
#SloppyFocus

# Don't use pointer-driven keyboard focus, but click to focus
ClickToFocus


### WINDOWS RING 

WindowRing {
##        "AppsClassName"
}

## f.wrapring warps only to windows visible in the current space
WarpRingOnScreen

## Don't raise windows when pointer is wraped to them
NoRaiseOnWarp

## Deiconify any iconified windows it encounters.
WarpUnmapped


menu "Menuwin" {
    "Window Menu"			f.title
    "Pin menu"		f.pin
    ""			f.separator
    "Info..."			f.identify
    "Resize"			f.resize
    "Move"			f.move
    "Kill"			f.destroy
    "Occupy All"		f.occupyall
    "Close"			f.delete
#    ""				f.separator
#    "Show WorkSpace Manager"	f.showworkspacemgr
#    "Hide WorkSpace Manager"	f.hideworkspacemgr
    ""				f.separator
}

#
# Define some useful functions for motion-based actions.
#
MoveDelta 3
Function "move-or-lower" { f.move f.deltastop f.lower }
Function "move-or-raise" { f.move f.deltastop f.raise }
Function "move-or-iconify" { f.move f.deltastop f.iconify }


Function "resize-plus" { 
f.resize South
}
#Button1 = c	: window	: f.function "move-or-lower"
#Button1 = c	: window	: f.iconify
#Button2 = c	: window|icon	: f.iconify
#Button3 = c	: window|icon	: f.function "resize-plus"

Button1 = m	: window|icon	: f.function "move-or-raise"
Button2 = m	: window|icon	: f.iconify
Button3 = m	: window|icon	: f.function "resize-plus"


"e" =	        m	: all	:!"    cd ; rox   &  "
"x" =	        m	: all	:!"    xterm -bg black -fg grey -fa 15 -e bash &  "
"n" =	        m	: all	:!"  cd ;   nedit   &  "
"f" =	        m	: all	:!"    links -g google.com &  "
"w" =	        m	: window	: f.delete
"r" =	        m	: window	: f.restart
"a" =	        m	: window	: f.fullzoom

Button3 =	: title		: f.menu "Menuwin"



ShowWorkSpaceManager			# activate/deactivate WSM
ShowIconManager				# activate/deactivate IM

AlwaysOnTop
{
     "TWM Icon Manager"
}


# IconRegion                "140x684+0+0"   North East 130 90  { }
# IconRegion                "140x684+140+0" North East 130 90  { }

# "F1"    =       : all : f.iconify
# "F1"    =       : all : f.raiselower 

#"Right"  = c|s : all : f.changesize "right +10" 
#"Left"   = c|s : all : f.changesize"right -10" 
#"Down"   = c|s : all : f.changesize "bottom +10" 
#"Up"     = c|s : all : f.changesize "bottom -10"
#"Left"   = c|m : all : f.prevworkspace  
#"Right"  = c|m : all : f.nextworkspace 

"1" = m : all : f.gotoworkspace "One" 
"2" = m : all : f.gotoworkspace "Two"
"3" = m : all : f.gotoworkspace "Three" 
"4" = m : all : f.gotoworkspace "Four"
"5" = m : all : f.gotoworkspace "Five" 
"6" = m : all : f.gotoworkspace "Six"
"7" = m : all : f.gotoworkspace "Seven" 
"8" = m : all : f.gotoworkspace "Eight"

# "Left"   = c|m : all : f.pack "left"
# "Right"  = c|m : all : f.pack "right"
# "Up"   = c|m : all : f.pack "top"
# "Down"  = c|m : all : f.pack "bottom"


# AutoRelativeResize			# intelligent resizing => easier




